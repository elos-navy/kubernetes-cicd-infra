---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: _PREFIX_jenkins-pv-claim
  labels:
    app: _PREFIX_jenkins
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: default
  resources:
    requests:
      storage: 5Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: _PREFIX_jenkins
  name: _PREFIX_jenkins
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: _PREFIX_jenkins
    spec:
      serviceAccountName: jenkins
      containers:
      - name: jenkins
        image: openshift/jenkins-2-centos7:latest
        ports:
        - containerPort: 8080
        - containerPort: 50000
        readinessProbe:
          httpGet:
            path: /login
            port: 8080
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 2
          failureThreshold: 5
        env:
        - name: JAVA_OPTS
          value: "-Djenkins.install.runSetupWizard=false"
        - name: JENKINS_PASSWORD
          value: "admin"
        volumeMounts:
        - mountPath: /var/lib/jenkins
          name: jenkins-data
      initContainers:
      - name: setup-permissions
        image: alpine:latest
        command:
          - /bin/sh
          - -c
          - ls -l /var/lib/jenkins; chown 1001:1001 /var/lib/jenkins
        volumeMounts:
        - mountPath: /var/lib/jenkins
          name: jenkins-data
      - name: install-plugins
        image: openshift/jenkins-2-centos7:latest
        command:
          - /bin/sh
          - -c
          - install-plugins.sh < /mnt/plugins.txt
        volumeMounts:
        - mountPath: /var/lib/jenkins
          name: jenkins-data
        - mountPath: /mnt
          name: jenkins-plugins
      - name: prepare-components-job
        image: openshift/jenkins-2-centos7:latest
        command:
          - /bin/sh
          - -c
          - mkdir -p /var/lib/jenkins/jobs/cicd-components-pipeline/builds; cd /var/lib/jenkins/jobs/cicd-components-pipeline/builds; touch legacyIds; ln -s ./-1 lastFailedBuild; ln -s ./-1 lastStableBuild; ln -s ./-1 lastSuccessfulBuild; ln -s ./-1 lastUnstableBuild; ln -s ./-1 lastUnsuccessfulBuild; cp /mnt/config.xml /var/lib/jenkins/jobs/cicd-components-pipeline/
        volumeMounts:
        - mountPath: /var/lib/jenkins
          name: jenkins-data
        - mountPath: /mnt
          name: components-job
      - name: prepare-app-job
        image: openshift/jenkins-2-centos7:latest
        command:
          - /bin/sh
          - -c
          - mkdir -p /var/lib/jenkins/jobs/cicd-app-pipeline/builds; cd /var/lib/jenkins/jobs/cicd-app-pipeline/builds; touch legacyIds; ln -s ./-1 lastFailedBuild; ln -s ./-1 lastStableBuild; ln -s ./-1 lastSuccessfulBuild; ln -s ./-1 lastUnstableBuild; ln -s ./-1 lastUnsuccessfulBuild; cp /mnt/config.xml /var/lib/jenkins/jobs/cicd-app-pipeline/
        volumeMounts:
        - mountPath: /var/lib/jenkins
          name: jenkins-data
        - mountPath: /mnt
          name: app-job
      volumes:
      - name: jenkins-data
        persistentVolumeClaim:
          claimName: _PREFIX_jenkins-pv-claim
      - name: jenkins-plugins
        configMap:
          name: _PREFIX_jenkins-plugins
      - name: components-job
        configMap:
          name: _PREFIX_components-job
      - name: app-job
        configMap:
          name: _PREFIX_app-job
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: _PREFIX_jenkins
  name: _PREFIX_jenkins
spec:
  externalTrafficPolicy: Cluster
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: _PREFIX_jenkins
  sessionAffinity: None
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: _PREFIX_jenkins
  name: _PREFIX_jenkins-plugins
data:
  plugins.txt: |-
    pam-auth:1.3
    ldap:1.20
    email-ext:2.63
    kubernetes-cd:0.2.3
    azure-commons:0.2.6
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: _PREFIX_jenkins
  name: _PREFIX_components-job
data:
  config.xml: |-
    <?xml version='1.1' encoding='UTF-8'?>
    <flow-definition plugin="workflow-job@2.29">
      <actions/>
      <description></description>
      <keepDependencies>false</keepDependencies>
      <properties>
        <io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty plugin="openshift-sync@1.0.27">
          <uid></uid>
          <namespace></namespace>
          <name></name>
          <resourceVersion></resourceVersion>
        </io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty>
      </properties>
      <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.61.1">
        <script>#!groovy
    
    def source_git_repo      = &apos;https://github.com/elos-tech/kubernetes-cicd-infra.git&apos;
    def name_prefix          = &apos;cicd-&apos;
    def prefix_label         = &apos;PREFIX&apos; // Helper variable for prefix substitution with double sed-ed templates.
    def jenkins_namespace    = &quot;${name_prefix}jenkins&quot;
    def components_namespace = &quot;${name_prefix}components&quot;
    def app_dev_namespace    = &quot;${name_prefix}tasks-dev&quot;
    def app_prod_namespace   = &quot;${name_prefix}tasks-prod&quot;
    
    node {
      stage(&apos;Cleanup&apos;) {
        delete_namespace(components_namespace)
        delete_namespace(app_dev_namespace)
        delete_namespace(app_prod_namespace)
      }
    
      stage(&apos;Checkout Source&apos;) {
        git source_git_repo
      }
      
      stage(&apos;Create Components namespace&apos;) {
        create_from_template &apos;default&apos;, &quot;templates/components-namespace.yaml _${prefix_label}_ $name_prefix&quot;
      }
      
      stage(&apos;Create Nexus&apos;) {
        create_from_template components_namespace, &quot;templates/nexus.yaml _${prefix_label}_ $name_prefix&quot;
        wait_for_deployment_ready(components_namespace, &quot;${name_prefix}nexus3&quot;)
        
        // Initialize Nexus
        def pod_name = get_pod_name(components_namespace, &quot;${name_prefix}nexus3&quot;)
        sh &quot;&quot;&quot;
          kubectl --namespace cicd-components cp artefacts/setup_nexus3.sh $pod_name:/tmp/
          
          FAILED=0
          while true
          do
            kubectl --namespace cicd-components exec $pod_name -- /bin/bash /tmp/setup_nexus3.sh admin admin123 http://localhost:8081 || FAILED=1
            [ \$FAILED -eq 0 ] &amp;&amp; break
            FAILED=0
            sleep 10
          done
        &quot;&quot;&quot;
      }
      
      stage(&apos;Create Sonarqube&apos;) {
        create_from_template components_namespace, &quot;&quot;&quot;templates/postgresql-persistent.yaml \
          _${prefix_label}_ ${name_prefix}sonar- \
          _POSTGRES_DB_ sonar \
          _POSTGRES_USER_ sonar \
          _POSTGRES_PASSWORD_ sonar \
          _DATABASE_SERVICE_NAME_ postgresql-sonarqube
        &quot;&quot;&quot;
        
        // Wait for deployment of sonarqube until postgres is ready to handle requests.
        wait_for_deployment_ready(components_namespace, &quot;${name_prefix}sonar-postgres&quot;)
        
        create_from_template components_namespace, &quot;templates/sonarqube.yaml _${prefix_label}_ ${name_prefix}&quot;
        wait_for_deployment_ready(components_namespace, &quot;${name_prefix}sonarqube&quot;)
      }
      
      stage(&apos;Create DEV namespace&apos;) {
        create_from_template components_namespace, &quot;templates/tasks-dev-namespace.yaml _${prefix_label}_ $name_prefix&quot;
      }
      
      stage(&apos;Create PROD namespace&apos;) {
        create_from_template components_namespace, &quot;templates/tasks-prod-namespace.yaml _${prefix_label}_ $name_prefix&quot;
      }
    }
    
    def delete_namespace(namespace_name) {
      sh &quot;&quot;&quot;
        kubectl delete namespace $namespace_name || echo
        while true;
        do
          kubectl get namespaces $namespace_name || break
          sleep 2
        done
      &quot;&quot;&quot;
    }
    
    def get_pod_name(namespace, app_name) {
      return sh (
        script: &quot;kubectl --namespace $namespace get pod | grep &apos;^$app_name&apos; | awk &apos;{ print \$1 }&apos;&quot;,
        returnStdout: true
      ).trim()
    }
    
    def create_from_template(namespace, request) {
      sh &quot;&quot;&quot;
        TMP_DIR=\$(mktemp -d)
    
        function create_from_template {
          FILE=\$1; shift
    
          if [ ! -f &quot;\$FILE&quot; ]; then
            echo &quot;ERROR: File &apos;\$FILE&apos; doesn&apos;t exist!&quot;
            exit 1
          fi
    
          set -x
          cp \$FILE &quot;\${TMP_DIR}/\$(basename \$FILE)&quot;
    
          while (( &quot;\$#&quot; )); do
            #echo &quot;Replacing parameter: \$1 -&gt; \$2&quot;
            sed -i &apos;s@&apos;\$1&apos;@&apos;\$2&apos;@g&apos; &quot;\${TMP_DIR}/\$(basename \$FILE)&quot;
            shift
            shift
          done
    
          kubectl --namespace $namespace create -f &quot;\${TMP_DIR}/\$(basename \$FILE)&quot;
          set +x
        }
        
        create_from_template $request
    
        rm -rf \$TMP_DIR
      &quot;&quot;&quot;
    }
    
    def wait_for_deployment_ready(namespace, deployment) {
      sh &quot;&quot;&quot;
        while true;
        do
          READY=\$(kubectl --namespace $namespace get deployment $deployment --no-headers | awk &apos;{ print \$5}&apos;)
          echo \$READY
          if [ \$READY -ge 1 ]; then
            break
          fi
          
          sleep 10
        done
      &quot;&quot;&quot;
    }</script>
        <sandbox>true</sandbox>
      </definition>
      <triggers/>
      <disabled>false</disabled>
    </flow-definition>
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: _PREFIX_jenkins
  name: _PREFIX_app-job
data:
  config.xml: |-
    <?xml version='1.1' encoding='UTF-8'?>
    <flow-definition plugin="workflow-job@2.29">
      <description></description>
      <keepDependencies>false</keepDependencies>
      <properties>
        <io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty plugin="openshift-sync@1.0.27">
          <uid></uid>
          <namespace></namespace>
          <name></name>
          <resourceVersion></resourceVersion>
        </io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty>
      </properties>
      <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.61.1">
        <script>node {
      stage(&apos;Hello&apos;) {
        
      }
    }</script>
        <sandbox>true</sandbox>
      </definition>
      <triggers/>
      <disabled>false</disabled>
    </flow-definition>
