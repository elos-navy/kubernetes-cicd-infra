---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: _PREFIX_jenkins
  name: _PREFIX_jenkins
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: _PREFIX_jenkins
    spec:
      serviceAccountName: jenkins
      containers:
      - name: jenkins
        image: openshift/jenkins-2-centos7:latest
        ports:
        - containerPort: 8080
        - containerPort: 50000
        readinessProbe:
          httpGet:
            path: /login
            port: 8080
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 2
          failureThreshold: 5
        env:
        - name: JAVA_OPTS
          value: "-Djenkins.install.runSetupWizard=false"
        - name: JENKINS_PASSWORD
          value: "xxxxxx"
        volumeMounts:
        - mountPath: /var/lib/jenkins
          name: jenkins-data
      initContainers:
      - name: install-plugins
        image: openshift/jenkins-2-centos7:latest
        command:
          - /bin/sh
          - -c
          - install-plugins.sh < /mnt/plugins.txt
        volumeMounts:
        - mountPath: /var/lib/jenkins
          name: jenkins-data
        - mountPath: /mnt
          name: jenkins-plugins
      - name: prepare-jobs
        image: openshift/jenkins-2-centos7:latest
        command:
          - /bin/sh
          - -c
          - mkdir -p /var/lib/jenkins/jobs/cicd-components-pipeline/builds; cd /var/lib/jenkins/jobs/cicd-components-pipeline/builds; touch legacyIds; ln -s ./-1 lastFailedBuild; ln -s ./-1 lastStableBuild; ln -s ./-1 lastSuccessfulBuild; ln -s ./-1 lastUnstableBuild; ln -s ./-1 lastUnsuccessfulBuild; cp /mnt/config.xml /var/lib/jenkins/jobs/cicd-components-pipeline/
        volumeMounts:
        - mountPath: /var/lib/jenkins
          name: jenkins-data
        - mountPath: /mnt
          name: components-job
      volumes:
      - name: jenkins-data
        emptyDir: {}
      - name: jenkins-plugins
        configMap:
          name: _PREFIX_jenkins-plugins
      - name: components-job
        configMap:
          name: _PREFIX_components-job
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: _PREFIX_jenkins
  name: _PREFIX_jenkins
spec:
  externalTrafficPolicy: Cluster
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: _PREFIX_jenkins
  sessionAffinity: None
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: _PREFIX_jenkins
  name: _PREFIX_jenkins-plugins
data:
  plugins.txt: |-
    pam-auth:1.3
    ldap:1.20
    email-ext:2.63
    kubernetes-cd:0.2.3
    azure-commons:0.2.6
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: _PREFIX_jenkins
  name: cicd-components-job
data:
  config.xml: |-
    <?xml version='1.1' encoding='UTF-8'?>
    <flow-definition plugin="workflow-job@2.29">
      <actions/>
      <description></description>
      <keepDependencies>false</keepDependencies>
      <properties>
        <io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty plugin="openshift-sync@1.0.27">
          <uid></uid>
          <namespace></namespace>
          <name></name>
          <resourceVersion></resourceVersion>
        </io.fabric8.jenkins.openshiftsync.BuildConfigProjectProperty>
      </properties>
      <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.61.1">
        <script>#!groovy
    
    def source_git_repo       = &apos;https://github.com/elos-tech/kubernetes-cicd-infra.git&apos;
    def name_prefix        = &apos;cicd-&apos;
    def jenkins_project    = &quot;${name_prefix}jenkins&quot;
    def components_project = &quot;${name_prefix}components&quot;
    def app_project_dev    = &quot;${name_prefix}tasks-dev&quot;
    def app_project_prod   = &quot;${name_prefix}tasks-prod&quot;
    
    node {
      stage(&apos;Cleanup&apos;) {
        sh &quot;&quot;&quot;
          kubectl delete namespace $components_project
          
          #kubectl --namespace=${components_project} get all
          #kubectl --namespace=${components_project} delete all,pvc,cm --selector=app=${name_prefix}nexus3
          #kubectl --namespace=${components_project} delete all,pvc,cm --selector=app=${name_prefix}sonar-postgres
          #kubectl --namespace=${components_project} delete all,pvc,cm --selector=app=${name_prefix}sonarqube
        &quot;&quot;&quot;
      }
    
      stage(&apos;Checkout Source&apos;) {
        git source_git_repo
      }
      
      stage(&apos;Create Components namespace&apos;) {
        sh &quot;&quot;&quot;
          kubectl create ns $components_project
          kubectl --namespace=${components_project} create -f jenkins-service-account.yml
        &quot;&quot;&quot;
      }
      
      stage(&apos;Create Nexus&apos;) {
        def prefix_name = &apos;PREFIX&apos;
        create_from_template &quot;nexus.yaml _${prefix_name}_ $name_prefix&quot;
      }
      
      stage(&apos;Create Sonarqube&apos;) {
        def prefix_name = &apos;PREFIX&apos;
        create_from_template &quot;&quot;&quot;postgresql-persistent.yaml \
          _${prefix_name}_ ${name_prefix}sonar- \
          _POSTGRES_DB_ sonar \
          _POSTGRES_USER_ sonar \
          _POSTGRES_PASSWORD_ sonar \
          _DATABASE_SERVICE_NAME_ postgresql-sonarqube
        &quot;&quot;&quot;
        
        create_from_template &quot;sonarqube.yaml _${prefix_name}_ ${name_prefix}&quot;
      }
      
      stage(&apos;Create DEV namespace&apos;) {
        sh &quot;kubectl create ns $app_project_dev&quot;
      }
      
      stage(&apos;Create PROD namespace&apos;) {
        sh &quot;kubectl create ns $app_project_prod&quot;
      }
    }
    
    def create_from_template(request) {
      sh &quot;&quot;&quot;
        TMP_DIR=\$(mktemp -d)
    
        function create_from_template {
          FILE=\$1; shift
    
          if [ ! -f &quot;\$FILE&quot; ]; then
            echo &quot;ERROR: File &apos;\$FILE&apos; doesn&apos;t exist!&quot;
            exit 1
          fi
    
          set -x
          cp \$FILE &quot;\${TMP_DIR}/\$(basename \$FILE)&quot;
    
          while (( &quot;\$#&quot; )); do
            #echo &quot;Replacing parameter: \$1 -&gt; \$2&quot;
            sed -i &apos;s@&apos;\$1&apos;@&apos;\$2&apos;@g&apos; &quot;\${TMP_DIR}/\$(basename \$FILE)&quot;
            shift
            shift
          done
    
          kubectl create -f &quot;\${TMP_DIR}/\$(basename \$FILE)&quot;
          set +x
        }
        
        create_from_template $request
    
        rm -rf \$TMP_DIR
      &quot;&quot;&quot;
    }</script>
        <sandbox>true</sandbox>
      </definition>
      <triggers/>
      <disabled>false</disabled>
    </flow-definition>
